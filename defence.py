# -*- coding: utf-8 -*-
"""Defence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Orx2Bw2CS-UGAXibAFnz0rOpy3v5t8mn
"""

import pandas as pd
import numpy as np
from scipy import stats

defence = pd.read_excel("Defenders.xlsx")
defence.head()

#avg cbi
avg_cbi = defence["clearances_blocks_interceptions"] / defence["matches_played"]

#avg_keypasses
avg_kp = defence["key_passes"] / defence["matches_played"]

#avg_recovery
avg_recovery = defence["recoveries"] / defence["matches_played"]

#avg tackles
avg_tackles = defence["tackles"] / defence["matches_played"]

# completed passes 
completed_passes = defence["completed_passes"] / defence["matches_played"]

# Clean sheets
clean_sheet = defence["clean_sheets"] / defence["matches_played"]

# Big Chance Created
b_c_c = defence["big_chances_created"] / defence["matches_played"]

# open play crosses
opc = defence["open_play_crosses"] / defence["matches_played"]

# goals scored 
goals_scored = defence["goals_scored"] / defence["matches_played"]

# dribbles 
dribbles = defence["dribbles"] / defence["matches_played"]

# attempted_passes
attempted_passes = defence["attempted_passes"] / defence["matches_played"]

# assists
assists = defence["assists"] / defence["matches_played"]



#addign weights
#defender_rating = (avg_cbi*0.375 + avg_recovery*0.187 +  avg_kp*0.093 + avg_tackles*0.093 + xA*0.252) * 100
#defender_rating = (avg_cbi*0.2 + avg_recovery*0.2 +  avg_kp*0.2 + avg_tackles*0.2 + xA*0.2) * 100
defender_rating = (avg_cbi * 0.083 + avg_kp * 0.083 + avg_recovery * 0.083 + avg_tackles * 0.083+
                completed_passes * 0.083 +  clean_sheet*0.083 + b_c_c *0.083 +  opc*0.083 + 
               goals_scored*0.083 + dribbles*0.083+ attempted_passes*0.083 + assists*0.083 ) * 100

defence["ratings"] = defender_rating
defence

defence = defence.iloc[:, [0,1,2,11,20]]
defence.sort_values(by="ratings", ascending=False)
#defence

d_data = defence.iloc[:, [4]]

scaled = (d_data - np.min(d_data)) / (np.max(d_data) - np.min(d_data))*10
#scaled = stats.zscore(d_data)

defence["scaled_rating"] = scaled

#defence.sort_values(by="ratings", ascending=False)
defence

who = defence.iloc[:, [3]]
who_scored_scaled = (who - np.min(who)) / (np.max(who) - np.min(who))*10

defence["who_scored_scaled_rating"] = who_scored_scaled

defence.sort_values(by="ratings", ascending=False)

diff = defence['scaled_rating'] - defence['who_scored_scaled_rating']
defence["difference_of_ratings"] = diff
defence.iloc[:, [0,1,5,6,7]]



diff.sum()

x = defence["scaled_rating"]
y = defence["who_scored_scaled_rating"]

np.corrcoef(x, y)

import matplotlib.pyplot as plt
plt1 = plt.scatter(x, y, color = "maroon")
plt.title("Whoscored Ratings vs Calculated Ratings (Defenders)")
plt.xlabel("Calculated Ratings")
plt.ylabel("Whoscored Ratings")
plt.text(10, -4,  "Correlation: 0.68")











